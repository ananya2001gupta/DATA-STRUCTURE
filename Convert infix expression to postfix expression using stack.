//" Given an infix expression, convert the infix to postfix expression. "//

#include<iostream>
#include<cstdio>
#include<cmath>
using namespace std;

#define SIZE 100

int Stack[SIZE], top=-1;

int isFull()
{
  return top==(SIZE-1);
}

int isEmpty()
{
  return top==-1;
}

// Function to add an item to stack.  It increases top by 1
int push(int item)
{
  if (isFull())
  {
    return -1;
  }
  Stack[++top] = item;
}

// Function to remove an item from stack.  It decreases top by 1
int pop()
{
  int temp;
  if (isEmpty())
  {
    return -1;
  }
  temp=Stack[top--];
  return temp;
}

int isOperand(char ch) {
    return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (isdigit(ch));
}
int checkPrecedence(char ch) {
    switch (ch) {
    case '+':
    case '-':
        return 1;
    case '*':
    case '/':
        return 2;
    case '^':
        return 3;
    }
    return -1;
}
int infixToPostfix(char exp[], char output[])
{
	int i = 0, k = 0;
    while (exp[i]) {
        if (isOperand(exp[i]))
            output[k++] = exp[i];
        else if (exp[i] == '(')
            push(exp[i]);
        else if (exp[i] == ')') {
            while (!isEmpty() && Stack[top] != '(') {
                output[k++] = Stack[top];
                pop();
            }
            if (!isEmpty() && Stack[top] != '(')
                return -1;
            else
                pop();
        } else {
            while (!isEmpty() && checkPrecedence(exp[i]) <= checkPrecedence(Stack[top])) {
                output[k++] = Stack[top];
                pop();
            }
            push(exp[i]);
        }
        i++;
    }
    while (!isEmpty()) {
        output[k++] = Stack[top];
        pop();
    }
    output[k++] = '\0';	
}

int main()
{
  int n;
  char *exp, input[100], output[100];
  cin>>n;
  exp = input;
  while(n--)
  {
    cin>>exp;
    infixToPostfix(exp, output);
    cout<<output<<endl;
  }
  return 0;
}

//"
Input:
2
A*(B+C)/D
(A-(B+C))*D
Expected Output:
ABC+*D/
ABC+-D*
"//
