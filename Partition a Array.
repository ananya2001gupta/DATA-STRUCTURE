//" Given a randomly ordered array (arr) of n elements, function partitionArray(int arr[], int n, int x) partition the elements into two subsets such that elements <= x are in left subset and elements > x are in the right subset.
Initial code of partitionArray(int arr[], int n, int x) which is given fails in some test cases. Identify those test cases and make the necessary changes in the function so that it gives the desired output in all the cases. "//

#include <stdio.h>
void partitionArray(int arr[], int n, int x)
{
   int i, j, temp;
  i = 0;
  j = n-1;
  while (i < j)
  {
    while (arr[i] <=x)
       i++;
    while (arr[j] > x)
       j--;
    if(i < j) {
      	temp = arr[i];
    	arr[i] = arr[j];
    	arr[j] = temp;
    }
    i++;
    j--;
  }  
}
int main()
{
    int i, n, x;
    scanf("%d", &n);
    scanf("%d", &x);
    
    int arr[n];
    for(i = 0; i < n; i++) 
        scanf("%d", &arr[i]);
    
    partitionArray(arr, n, x);
    
   for (i = 0; i < n; i++) 
       printf("%d\n", arr[i]);
  
    return 0;
}

//"
Input:
10 17
28 26 25 11 16 12 24 29 6 10
Expected Output:
10
6
12
11
16
25
24
29
26
28
"//
