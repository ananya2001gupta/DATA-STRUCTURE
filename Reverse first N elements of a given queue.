//" Given a queue of integer elements and an integer k, your task is to reverse first k elements of the queue, leaving the other elements in same order. "//

#include<iostream>
#include<cstdio>
#include<cmath>
using namespace std;

class Queue{
  int *queue;
  int front;
  int rear;
  int capacity;
  public:
  	Queue(int size){
      this->capacity = size;
      queue = new int[size];
      front = 0;
      rear = 0;
    }
  	void enQueue(int data){
      if(rear == capacity){
        cout<<"Overflow\n";
        return;
      }
      queue[rear++] = data;
    }
 	int deQueue(){
    	if(front == rear){
      		return -1;
    	}
    	return queue[front++];
  	}
  	bool isEmpty(){
      return front == rear;
    }
  	int size(){
      return rear-front;
    }
};

void reverseKElementsQueue(Queue* queue,int k){
  // Write your code here
  int size = queue->size();
  	if(k > size)
      	return;
  	int arr[size];
  	for(int i = 0; i < k; i++)
      	arr[i] = queue->deQueue();
  	for(int i = 0, j = k-1; i <= j; i++,j--)
    {
      	int temp = arr[i];
      	arr[i] = arr[j];
      	arr[j] = temp;
    }
  	for(int i = k; i < size; i++)
      	arr[i] = queue->deQueue();
  	for(int i = 0; i < size; i++)
      	queue->enQueue(arr[i]);
}
int main(){
  int t;
  cin>>t;
  while(t--){
    int n;
    cin>>n;
    int k;
    cin>>k;
    Queue *queue = new Queue(100);
    while(n--){
      int x;
      cin>>x;
      queue->enQueue(x);
    }
    reverseKElementsQueue(queue,k);
    while((n = queue->deQueue())!=-1)
      cout<<n<<' ';
    cout<<endl;
  }
}

//"
Input:
2
9
5
10
20
30
40
50
60
70
80
90
6
3
1
2
3
3
2
1
Expected Output:
50 40 30 20 10 60 70 80 90 
3 2 1 3 2 1
"//
